<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/tx/spring-aop-4.0.xsd">

       <!-- 这里和spring-mvc扫描注解功能重复，所以需要分别配置两个的include和exclude，针对Controller类 -->
       <context:component-scan base-package="hsgene">
              <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       </context:component-scan>
       <!-- 读取properties配置文件 -->
       <context:property-placeholder location="classpath:db.properties"/>
       <!-- 多种数据源：应用服务器自带数据源JNDI连接池、spring自带数据源DriverManagerDataSource不带连接池、等多种方式 -->
       <!-- 配置dbcp数据源，带连接池，指定应用停止后数据源销毁方法，数据源对象为单例 -->
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
              <property name="driverClassName" value="${driver}"/>
              <property name="url" value="${url}"/>
              <property name="username" value="root"/>
              <property name="password" value="${password}"/>
       </bean>
       <!-- 使用数据源配置事务管理，使用的时候使用注解@Transactional或AOP方式 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
       </bean>
       <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
       <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
       <!-- 使用spring-mybatis的SqlSessionFactoryBean来整合mybatis，生成一个单例SqlSessionFactory，基于工厂模式 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"/>
              <property name="configLocation" value="classpath:mybatis-config.xml"/>
              <!--<property name="mapperLocations" value="classpath:mapper/*.xml"/>-->
       </bean>
       <!-- 三种操作是数据库方式：SqlSessionTemplate、MapperFactoryBean、MapperScannerConfigurer -->
       <!-- 使用SqlSessionTemplate方式操作数据库，其就是实现的SqlSession接口 -->
       <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
              <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
       </bean>
       <!-- 此种方式使用mapperInterface属性代替SqlSessionFactoryBean中的mapperLocations属性 -->
       <!-- 该对象就是Dao的实现类，将其注入到Service类中使用，所以每个Dao都需要配置一个MapperFactoryBean，比较麻烦 -->
       <bean id="employeeDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
              <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
              <property name="mapperInterface" value="hsgene.dao.EmployeeDao"/>
       </bean>
       <!-- MapperFactoryBean方式必须在xml中给service注入属性 -->
       <bean id="employeeService" class="hsgene.service.EmployeeService">
              <property name="employeeDao" ref="employeeDao"/>
       </bean>

</beans>