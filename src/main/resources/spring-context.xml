<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
    <!--指定xsi:schemaLocation时不用指定版本，否则有些标签可能无法识别导致容器无法初始化 -->

    <!-- 这里和spring-mvc扫描注解功能重复，所以需要分别配置两个的include和exclude，针对Controller类，而且该标签包含了context:annotation-config标签的功能 -->
    <context:component-scan base-package="com.hsgene">
        <!-- @Service、@Resource、@Component等注解都由spring父容器来扫描，但是不能和子容器重复扫描@Controller，否则事务使用会出问题 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 读取properties配置文件，注意这里要设置system-properties-mode属性为FALLBACK，其默认为ENVIRONMENT，会先读取系统环境中的属性，再读取location指定文件中的属性，而username属性系统环境中也有，所以会先读取系统用户名 -->
    <context:property-placeholder location="classpath:db.properties" system-properties-mode="FALLBACK"/>
    <!-- 配置spring线程池，提供多线程功能 -->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="50" />
        <property name="maxPoolSize" value="50" />
        <property name="queueCapacity" value="1000" />
        <property name="keepAliveSeconds" value="60" />
    </bean>
    <!-- spring计划任务配置，用 @Component @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 -->
    <task:executor id="executor" pool-size="5"/>
    <task:scheduler id="scheduler" pool-size="10"/>
    <task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>
    <!-- 多种数据源：应用服务器自带数据源JNDI连接池、spring自带数据源DriverManagerDataSource不带连接池、等多种方式 -->
    <!-- 配置dbcp数据源，带连接池，指定应用停止后数据源销毁方法，数据源对象为单例 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="3"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
    </bean>
    <!-- 为事务管理配置数据源，通过@Transactional注解或AOP方式使用它 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类或方法  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!-- 开启切面自动代理，作用同@EnableAspectJAutoProxy注解，目标对象无接口时使用cglib动态代理，否则使用JDK动态代理 -->
    <aop:aspectj-autoproxy/>
    <!-- 使用spring-mybatis的SqlSessionFactoryBean来整合mybatis，生成一个单例SqlSessionFactory，基于工厂模式 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 这里指定类别名后，mybatis-config.xml中就不需要再指定了 -->
        <property name="typeAliasesPackage" value="com.hsgene"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
    </bean>
    <!-- 三种操作是数据库方式：SqlSessionTemplate、MapperFactoryBean、MapperScannerConfigurer -->
    <!-- 使用SqlSessionTemplate方式操作数据库，其就是实现的SqlSession接口 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>
    <!-- 此种方式使用mapperInterface属性代替SqlSessionFactoryBean中的mapperLocations属性 -->
    <!-- 该对象就是Dao的实现类，将其注入到Service类中使用，所以每个Dao都需要配置一个MapperFactoryBean，比较麻烦 -->
    <!-- 而且需要极为注意的是此种方法要求mapper.xml文件必须和mapper接口在同一个目录下，且除了后缀名名称必须一致，否则两者无法映射匹配 -->
    <!--<bean id="employeeDao" class="org.mybatis.spring.mappers.MapperFactoryBean">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <property name="mapperInterface" value="com.hsgene.dao.EmployeeDao"/>
    </bean>-->
    <!-- MapperFactoryBean方式必须在xml中给service注入属性，并指定setter方法 -->
    <!--<bean id="employeeService" class="com.hsgene.service.EmployeeService">
        <property name="employeeDao" ref="employeeDao"/>
    </bean>-->

    <!-- 扫描basePackage下的Mapper接口,如果com.hsgene.dao包下并不完全是我们定义的Mapper接口，我们也可以通过自定义注解的方式指定生成MapperFactoryBean对象 -->
    <!-- 此种方法也是基于MapperFactoryBean方法 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hsgene.dao"/>
        <!-- 当只有一个数据源时，sqlSessionFactoryBeanName属性是可以不手动注入的，MapperScannerConfigurer会自动autowired一个sqlSessionFactory，
         当有多个数据源时，即有多个sqlSessionFactory时，就要指定一个用于sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--<property name="annotationClass" value="com.hsgene.common.MyBatisDao"/>-->
    </bean>
    <!-- redis数据源配置 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis_url}"/>
        <property name="port" value="${redis_port}"/>
        <property name="password" value="${redis_password}"/>
        <property name="database" value="5"/>
        <property name="usePool" value="true"/>
        <property name="timeout" value="5000"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>
    <!-- 配置poolConfig连接池 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="minIdle" value="10"/>
        <property name="maxIdle" value="100"/>
        <property name="maxTotal" value="300"/>
        <property name="maxWaitMillis" value="10000"/>
    </bean>
    <!-- 注入spring-redis-data的redisTemplate对象 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
    </bean>

</beans>